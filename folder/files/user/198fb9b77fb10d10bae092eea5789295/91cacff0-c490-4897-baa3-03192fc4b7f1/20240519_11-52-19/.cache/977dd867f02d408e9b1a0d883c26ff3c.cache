[{"entry_id": "http://arxiv.org/abs/1808.05444v1", "updated": "2018-08-16 12:30:52+00:00", "published": "2018-08-16 12:30:52+00:00", "title": "DRLGENCERT: Deep Learning-based Automated Testing of Certificate Verification in SSL/TLS Implementations", "authors": ["Chao Chen", "Wenrui Diao", "Yingpei Zeng", "Shanqing Guo", "Chengyu Hu"], "summary": "The Secure Sockets Layer (SSL) and Transport Layer Security (TLS) protocols\nare the foundation of network security. The certificate verification in SSL/TLS\nimplementations is vital and may become the weak link in the whole network\necosystem. In previous works, some research focused on the automated testing of\ncertificate verification, and the main approaches rely on generating massive\ncertificates through randomly combining parts of seed certificates for fuzzing.\nAlthough the generated certificates could meet the semantic constraints, the\ncost is quite heavy, and the performance is limited due to the randomness. To\nfill this gap, in this paper, we propose DRLGENCERT, the first framework of\napplying deep reinforcement learning to the automated testing of certificate\nverification in SSL/TLS implementations. DRLGENCERT accepts ordinary\ncertificates as input and outputs newly generated certificates which could\ntrigger discrepancies with high efficiency. Benefited by the deep reinforcement\nlearning, when generating certificates, our framework could choose the best\nnext action according to the result of a previous modification, instead of\nsimple random combinations. At the same time, we developed a set of new\ntechniques to support the overall design, like new feature extraction method\nfor X.509 certificates, fine-grained differential testing, and so forth. Also,\nwe implemented a prototype of DRLGENCERT and carried out a series of real-world\nexperiments. The results show DRLGENCERT is quite efficient, and we obtained\n84,661 discrepancy-triggering certificates from 181,900 certificate seeds, say\naround 46.5% effectiveness. Also, we evaluated six popular SSL/TLS\nimplementations, including GnuTLS, MatrixSSL, MbedTLS, NSS, OpenSSL, and\nwolfSSL. DRLGENCERT successfully discovered 23 serious certificate verification\nflaws, and most of them were previously unknown.", "comment": null, "journal_ref": null, "doi": null, "primary_category": "cs.CR", "categories": ["cs.CR"], "links": ["http://arxiv.org/abs/1808.05444v1", "http://arxiv.org/pdf/1808.05444v1"], "pdf_url": "http://arxiv.org/pdf/1808.05444v1"}, {"entry_id": "http://arxiv.org/abs/1410.7745v1", "updated": "2014-10-28 19:19:14+00:00", "published": "2014-10-28 19:19:14+00:00", "title": "An Application Package Configuration Approach to Mitigating Android SSL Vulnerabilities", "authors": ["Vasant Tendulkar", "William Enck"], "summary": "Computing platforms such as smartphones frequently access Web content using\nmany separate applications rather than a single Web browser application. These\napplications often deal with sensitive user information such as financial data\nor passwords, and use Secure Sockets Layer (SSL) to protect it from\nunauthorized eavesdropping. However, recent studies have confirmed a\nwide-spread misconfiguration of SSL verification in applications. This paper\nconsiders the difficulty faced by Android application developers when modifying\nSSL code for using common features like pinning or using a self-signed SSL\ncertificate. For example, developing an application that accesses a test Web\nserver with a self-signed certificate requires additional code to remove SSL\nverification; however, this code is not always removed in production versions\nof the application. To mitigate vulnerabilities introduced because of the\ncomplexity of customizing SSL code in Android applications, we propose that\ncommon SSL configuration should be specified in the application's package\nmanifest. We provide two concrete suggestions: 1) linking the application's\ndebug state to SSL verification, and 2) pinning certificates and CAs in the\nmanifest. We evaluate the appropriateness of these two suggestions on over\n13,000 applications from Google's Play Store, of which 3,302 use SSL in\nnon-advertisement code, and find that 1,889 (57.20%) of these SSL applications\nwould benefit.", "comment": "In Proceedings of the Third Workshop on Mobile Security Technologies\n  (MoST) 2014 (http://arxiv.org/abs/1410.6674)", "journal_ref": null, "doi": null, "primary_category": "cs.CR", "categories": ["cs.CR"], "links": ["http://arxiv.org/abs/1410.7745v1", "http://arxiv.org/pdf/1410.7745v1"], "pdf_url": "http://arxiv.org/pdf/1410.7745v1"}, {"entry_id": "http://arxiv.org/abs/1704.04937v2", "updated": "2017-07-19 20:19:43+00:00", "published": "2017-04-17 11:42:34+00:00", "title": "Certificate Transparency with Enhancements and Short Proofs", "authors": ["Abhishek Singh", "Binanda Sengupta", "Sushmita Ruj"], "summary": "Browsers can detect malicious websites that are provisioned with forged or\nfake TLS/SSL certificates. However, they are not so good at detecting malicious\nwebsites if they are provisioned with mistakenly issued certificates or\ncertificates that have been issued by a compromised certificate authority.\nGoogle proposed certificate transparency which is an open framework to monitor\nand audit certificates in real time. Thereafter, a few other certificate\ntransparency schemes have been proposed which can even handle revocation. All\ncurrently known constructions use Merkle hash trees and have proof size\nlogarithmic in the number of certificates/domain owners.\n  We present a new certificate transparency scheme with short (constant size)\nproofs. Our construction makes use of dynamic bilinear-map accumulators. The\nscheme has many desirable properties like efficient revocation, low\nverification cost and update costs comparable to the existing schemes. We\nprovide proofs of security and evaluate the performance of our scheme.", "comment": "A preliminary version of the paper was published in ACISP 2017", "journal_ref": null, "doi": null, "primary_category": "cs.CR", "categories": ["cs.CR", "cs.DS"], "links": ["http://arxiv.org/abs/1704.04937v2", "http://arxiv.org/pdf/1704.04937v2"], "pdf_url": "http://arxiv.org/pdf/1704.04937v2"}, {"entry_id": "http://arxiv.org/abs/0909.3530v1", "updated": "2009-09-18 20:38:03+00:00", "published": "2009-09-18 20:38:03+00:00", "title": "Securing Remote Procedure Calls over HTTPS", "authors": ["Ajinkya Kale", "Ashish Gilda", "Sudeep Pradhan"], "summary": "Remote Procedure Calls (RPC) are widely used over the Internet as they\nprovide a simple and elegant way of interaction between the client and the\nserver. This paper proposes a solution for securing the remote procedure calls\n(RPC) by tunneling it through HTTPS (Hypertext Transfer Protocol over Secure\nSocket Layer). RPC over HTTP actually uses the Secure Socket Layer (SSL)\nprotocol as a transport for the traffic. SSL mandates that the server\nauthenticates itself to the client using a digital certificate (and associated\nprivate key). SSL is normally configured to encrypt traffic before transmitting\nit between the server and client and vice versa.", "comment": null, "journal_ref": null, "doi": null, "primary_category": "cs.CR", "categories": ["cs.CR"], "links": ["http://arxiv.org/abs/0909.3530v1", "http://arxiv.org/pdf/0909.3530v1"], "pdf_url": "http://arxiv.org/pdf/0909.3530v1"}, {"entry_id": "http://arxiv.org/abs/1505.00589v1", "updated": "2015-05-04 10:50:26+00:00", "published": "2015-05-04 10:50:26+00:00", "title": "Danger is My Middle Name: Experimenting with SSL Vulnerabilities in Android Apps", "authors": ["Lucky Onwuzurike", "Emiliano De Cristofaro"], "summary": "This paper presents a measurement study of information leakage and SSL\nvulnerabilities in popular Android apps. We perform static and dynamic analysis\non 100 apps, downloaded at least 10M times, that request full network access.\nOur experiments show that, although prior work has drawn a lot of attention to\nSSL implementations on mobile platforms, several popular apps (32/100) accept\nall certificates and all hostnames, and four actually transmit sensitive data\nunencrypted. We set up an experimental testbed simulating man-in-the-middle\nattacks and find that many apps (up to 91% when the adversary has a certificate\ninstalled on the victim's device) are vulnerable, allowing the attacker to\naccess sensitive information, including credentials, files, personal details,\nand credit card numbers. Finally, we provide a few recommendations to app\ndevelopers and highlight several open research problems.", "comment": "A preliminary version of this paper appears in the Proceedings of ACM\n  WiSec 2015. This is the full version", "journal_ref": null, "doi": null, "primary_category": "cs.CR", "categories": ["cs.CR", "cs.SE"], "links": ["http://arxiv.org/abs/1505.00589v1", "http://arxiv.org/pdf/1505.00589v1"], "pdf_url": "http://arxiv.org/pdf/1505.00589v1"}]